id: https://w3id.org/kgcl
name: kgcl
title: Knowledge Graph Change Language
description: >-
  A data model for describing change operations at a high level on an ontology or ontology-like artefact, e.g Knowledge Graph.
  
  See [https://github.com/cmungall/knowledge-graph-change-language](https://github.com/cmungall/knowledge-graph-change-language)
  
license: https://creativecommons.org/publicdomain/zero/1.0/
version: 0.0.1


prefixes:
  kgcl: http://w3id.org/kgcl
  dcterms: http://purl.org/dc/terms/
  IAO: http://purl.obolibrary.org/obo/IAO_
  oio: "http://www.geneontology.org/formats/oboInOwl#"
  biolinkml: https://w3id.org/biolink/biolinkml/
  
default_prefix: kgcl
default_range: string

imports:
  - biolinkml:types
  - ontology_model
  - prov

types:

  change class type:
    typeof: uriorcurie
    description: >-
      CURIE for a class within this datamodel. E.g. kgcl:NodeObsoletion
  
classes:

  change:
    description: >-
      Any change perform on an ontology or knowledge graph
    slots:
      - was generated by

  simple change:
    aliases:
      - atomic change
    is_a: change
    description: >-
      A change that is about a single ontology element
    slots:
      - about
      - old value
      - new value

  complex change:
    is_a: change
    description: >-
      A change that is is a composition of other changes
    slots:
      - change set

  multi node obsoletion:
    aliases:
      - multi node deprecation
      - multi class obsoletion
      - multi term obsoletion
      - multi concept obsoletion
    is_a: complex change
    description: >-
      A complex change consisting of multiple obsoletions.
    see_also:
      - https://github.com/cmungall/obo-scripts/blob/master/obo-obsoletify.pl
    slot_usage:
      change set:
        range: node obsoletion
      change description:
        string_serialization: "composition of {change set}"
      associated change set:
        is_a: change set
        description: >-
          All changes associated with a set of obsoletions.
          This change set is the composed change set rather than the
          set of individual changes.
          For example, if previous state is:
            `A subClassOf B subClassOf C subClassOf D`
          and we obsolete {B,C}, then the individual changes are
          `A moves from B to C` and `B moves from C to D`, but the composed
          change set is `A moves from B to D`
      
    
      
  transaction:
    description: >-
      A unified set of changes. Could be a single change, or the results of an ontology diff
    slots:
      - change set

  change set summary statistic:
    description:
      A summary statistic for a set of changes of the same type, grouped by zero or more node properties
    slot_usage:
      change type:
        range: change class type
      count:
        range: integer
      property value set:
        description: >-
          Summary statistic is grouped by these constraints
      
  change mixin:
    mixin: true
    description: >-
      root class for all change mixins

  obsoletion:
    is_a: change mixin
    mixin: true
    description: >-
      Obsoletion of an element deprecates usage of that element, but does not delete that element.
    see_also:
      - http://wiki.geneontology.org/index.php/Obsoleting_an_Existing_Ontology_Term

  unobsoletion:
    is_a: change mixin
    mixin: true
    description: >-
      Opposite operation of obsoletion. Rarely performed.
    see_also:
      - http://wiki.geneontology.org/index.php/Restoring_an_Obsolete_Ontology_Term
    # reverse_of: obsoletion

  deletion:
    is_a: change mixin
    mixin: true
    description: >-
      Removal of an element.
    comments:
      - Elements should never be deleted, always obsolete

  creation:
    is_a: change mixin
    mixin: true
    description: >-
      Creation of an element.
    # reverse_of: deletion

  add to subset:
    is_a: change mixin
    mixin: true
    description: >-
      placing an element inside a subset
    slot_usage:
      in subset:
        range: subset
        description: >-
          subset that the element is being placed inside.

  remove from subset:
    # reverse_of: add to subset
    is_a: change mixin
    mixin: true
    description: >-
      removing an element from a subset
    slot_usage:
      in subset:
        range: subset
        description: >-
          subset that the element is being removed from
      
  edge change:
    aliases:
      - axiom change
      - triple change
    is_a: simple change
    description: >-
      A change in which the entity changes is an edge
    slot_usage:
      about:
        domain: edge

  edge creation:
    aliases:
      - relationship creation
    is_a: edge change
    description: >-
      An edge change in which a de-novo edge is created. The edge is potentially annotated in the same action.
    mixins:
      - creation
    slots:
      - subject
      - edge label
      - object
      - annotation set
    slot_usage:
      change description:
        string_serialization: "creating edge {edge}"
    see_also:
      - http://wiki.geneontology.org/index.php/Guidelines_for_creating_relationships_between_terms
        
  edge deletion:
    aliases:
      - relationship deletion
    is_a: edge change
    description: >-
      An edge change in which an edge is removed. All edge annotations/properies are removed in the same action.
    mixins:
      - deletion
    slots:
      - subject
      - edge label
      - object
      - annotation set
    slot_usage:
      change description:
        string_serialization: "deleting edge {edge}"
        
  edge obsoletion:
    aliases:
      - relationship obsoletion
    is_a: edge change
    description: >-
      An edge change in which an edge is obsoleted.
    comments:
      - Note there is not yet consensus in how this should be done in rdf/owl implementations. Simply marking the edge deprecated with render it visible to most clients.
    mixins:
      - obsoletion
    slots:
      - subject
      - edge label
      - object
      - annotation set
    slot_usage:
      change description:
        string_serialization: "obsoleting edge {edge}"
        

  node move:
    is_a: edge change
    description: >-
      A node move is a combination of deleting a parent edge and adding a parent edge, where the edge label is preserved and the object/parent node changes
    examples:
      - value: changing a is-a b to a is-a c
    slot_usage:
      change description:
        string_serialization: "move {about} from {old value} to {new value}"

  node deepening:
    is_a: node move
    description: >-
      A node move in which a node where the destination is a proper descendant of the original location.
      Note that here descendant applied not just to subclass, but edges of any edge label in the relational graph
    examples:
      - value: changing a is-a b to a is-a c, where c is a subclass of b
    slot_usage:
      change description:
        string_serialization: "deepened {about} from {old value} to {new value}"

  node shallowing:
    is_a: node move
    description: >-
      The opposite of node deepening
    examples:
      - value: changing a is-a c to a is-a b, where c is a subclass of b
    slot_usage:
      change description:
        string_serialization: "shallowed {about} from {old value} to {new value}"

  edge label change:
    is_a: edge change
    description: >-
      An edge change where the edge label (relationship type) is modified.
    examples:
      - value: changing a is-a b to a part-of b
    slot_usage:
      change description:
        string_serialization: "changing relationship between {about.subject} and {about.object} from {old value} to {new value}"

  edge logical interpretation change:
    is_a: edge change
    description: >-
      An edge change where the subjet, object, and edge label are unchanged, but the logical interpretation changes
    examples:
      - value: changing a SubClassOf r some b to a subClassOf r only b

  node change:
    is_a: simple change
    description: >-
      A simple change where the change is about a node
    slots:
      - about
    slot_usage:
      about:
        domain: node

  node rename:
    is_a: node change
    description: >-
      A node change where the name (aka rdfs:label) of the node changes
    slots:
      - old value
      - new value
      - has textual diff      
    slot_usage:
      old value:
        multivalued: false
      new value:
        multivalued: false
      change description:
        string_serialization: "renaming {about} from {old value} to {new value}"

  node annotation change:
    description: >-
      A node change where the change alters node properties/annotations. TODO
    is_a: node change

  node annotation replacement:
    is_a: node annotation change
    description: >-
      A node annotation change where the change replaces a particular property value. TODO

  node synonym change:
    is_a: node change
    
  new synonym:
    description: >-
      A node change where a de-novo synonym is created
    is_a: node synonym change
    slots:
      - new value

  remove synonym:
    description: >-
      A node change where a synonym is deleted
    is_a: node synonym change
    slots:
      - old value

  synonym replacement:
    description: >-
      A node change where the text of a synonym is changed
    is_a: node synonym change
    slots:
      - old value
      - new value
      - has textual diff

  node text definition change:
    is_a: node change
    
  new text definition:
    description: >-
      A node change where a de-novo text definition is created
    is_a: node text definition change
    slots:
      - new value

  remove text definition:
    description: >-
      A node change where a text definition is deleted
    is_a: node text definition change
    slots:
      - old value

  text definition replacement:
    description: >-
      A node change where a text definition is modified
    is_a: node text definition change
    slots:
      - old value
      - new value
      - has textual diff

        
  datatype change:
    is_a: simple change

  add node to subset:
    aliases:
      - add term to slim
    is_a: node change
    mixins:
      - add to subset
    description: >-
      Places a node inside a subset, by annotating that node
    see_also:
      - http://wiki.geneontology.org/index.php/Adding_a_Term_to_a_GO_Subset_(Slim)

  removed node from subset:
    aliases:
      - remove term from slim
    is_a: node change
    mixins:
      - remove from subset
    description: >-
      Removes a node from a subset, by removing an annotation

  node obsoletion:
    aliases:
      - node deprecation
      - class obsoletion
      - term obsoletion
      - concept obsoletion
    is_a: node change
    mixins:
      - obsoletion
    description: >-
      Obsoletion of a node deprecates usage of that node, but does not delete it.
    slot_usage:
      change description:
        string_serialization: "obsoleting {about}"
      replaced by:
        range: node
        exact_mappings:
          - IAO:0100001 
        description: >-
          When this is present, the node obsoletion MAY be associated with automated
          rewiring changes
      consider:
        range: node
        exact_mappings:
          - oio:consider
      associated change set:
        is_a: change set
        description: >-
          All changes forced as a result of this obsoletion. For example,
          starting with `A subClassOf B subClassOf C`, if we obsolete node B,
          then we may decide to bundle in a node move change of A from B to C.
          Note: this change set is not considered a part of the obsoletion,
          as obsoletion is considered atomic/simple. Instead this is a reference
          to a change set that may exist elsewhere
    see_also:
      - http://wiki.geneontology.org/index.php/Obsoleting_an_Existing_Ontology_Term
        
  node unobsoletion:
    # reverse_of: node obsoletion
    aliases:
      - node undeprecation
      - class unobsoletion
      - term unobsoletion
      - concept unobsoletion
    is_a: node change
    mixins:
      - unobsoletion
    description: >-
      unobsoletion of a node deprecates usage of that node. Rarely applied.
    slot_usage:
      change description:
        string_serialization: "unobsoleting {about}"
      replaced by:
        range: node
      consider:
        range: node
    see_also:
      - http://wiki.geneontology.org/index.php/Restoring_an_Obsolete_Ontology_Term
        
  node creation:
    is_a: node change
    mixins:
      - creation
    slots:
      - id
      - name
      - annotation set
    slot_usage:
      change description:
        string_serialization: "creating node {id} {label} with {annotation set}"
    todos:
      - allow this for the creation of an instance from a class. This may include metaclasses (templates)
    see_also:
      - http://wiki.geneontology.org/index.php/Guidelines_for_creating_a_GO_term

  node deletion:
    is_a: node change
    mixins:
      - deletion
    description: >-
      Deletion of a node from the graph. Note it is recommended nodes are obsoleted and never merged,
      but this operation exists to represent deletions in ontologies, accidental or otherwise
    slot_usage:
      change description:
        string_serialization: "deleting {about}"

  node obsoletion with merge:
    is_a: node obsoletion
    description: >-
      An obsoletion change in which information from the obsoleted node is moved to a single target.
    slot_usage:
      target:
        multivalued: false
      about:
        aliases:
          - alt_id
      change description:
        string_serialization: "merging {about} into {target}"
    see_also:
      - http://wiki.geneontology.org/index.php/Merging_Ontology_Terms
      - http://wiki.geneontology.org/index.php/Principles_for_merging_terms

  node obsoletion with split:
    is_a: node obsoletion
    description: >-
      An obsoletion change in which information from the obsoleted node is moved selectively to multiple targets
    slot_usage:
      target:
        multivalued: true
      change description:
        string_serialization: "splitting {about} into {target.join(' ')}"

  textual diff:
    description: >-
      A summarizing of a change on a piece of text. This could be rendered in a number of different ways

slots:

  about:
    description: >-
      The 'focus' entity on which the change operates
    multivalued: false

  target:
    description: >-
      The secondary entity on which the change operates

  old value:
    description: >-
      The value of a property held in the old instance of the ontology

  new value:
    description: >-
      The value of a property held in the old instance of the ontology

  change description:
    description: >-
      A string serialization of the change

  has textual diff:
    domain: change
    range: textual diff
      
  change set:
    range: change
    multivalued: true

