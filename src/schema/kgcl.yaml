id: https://w3id.org/kgcl
name: kgcl
title: Knowledge Graph Change Language
description: |-
  A data model for describing change operations at a high level on an ontology or ontology-like artefact, such as a Knowledge Graph.
  
  * [Browse Schema](https://cmungall.github.io/knowledge-graph-change-language/)
  * [GitHub](https://github.com/cmungall/knowledge-graph-change-language)
  
license: https://creativecommons.org/publicdomain/zero/1.0/
version: 0.0.1

prefixes:
  kgcl: http://w3id.org/kgcl/
  dcterms: http://purl.org/dc/terms/
  IAO: http://purl.obolibrary.org/obo/IAO_
  oio: "http://www.geneontology.org/formats/oboInOwl#"
  linkml: https://w3id.org/linkml/
  
default_prefix: kgcl
default_range: string

imports:
  - linkml:types
  - ontology_model
  - prov

types:

  change class type:
    typeof: uriorcurie
    description: >-
      CURIE for a class within this datamodel. E.g. kgcl:NodeObsoletion
  
classes:

  change:
    abstract: true
    description: >-
      Any change perform on an ontology or knowledge graph
    slots:
      - id
      - was generated by
      - see also
      - pull request
      - creator
      - change date
      - contributor
      - has undo
    slot_usage:
      was generated by:
        comments:
          - we use the PROV model to represent the agent making a change
      see also:
        comments:
          - If this change is in relationship to an issue on a system like github, include the URL here
      pull request:
        comments:
          - If this change has a pull request on a system like github, include the URL here
      creator:
        comments:
          - This should be the composition of 'was generated by' and 'was associated with'
      change date:
        comments:
          - This should be the composition of 'was generated by' and 'ended at time'

  simple change:
    abstract: true
    aliases:
      - atomic change
    is_a: change
    description: >-
      A change that is about a single ontology element
    slots:
      - old value
      - new value

  complex change:
    abstract: true
    is_a: change
    description: >-
      A change that is is a composition of other changes
    slots:
      - change set

    
  multi node obsoletion:
    aliases:
      - multi node deprecation
      - multi class obsoletion
      - multi term obsoletion
      - multi concept obsoletion
    is_a: complex change
    description: >-
      A complex change consisting of multiple obsoletions.
    see_also:
      - https://github.com/cmungall/obo-scripts/blob/master/obo-obsoletify.pl
    slot_usage:
      change set:
        range: node obsoletion
      change description:
        string_serialization: "a multi node obsoletion consisting of {change set}"
      associated change set:
        is_a: change set
        description: >-
          All changes associated with a set of obsoletions.
          This change set is the composed change set rather than the
          set of individual changes.
          For example, if previous state is:
            `A subClassOf B subClassOf C subClassOf D`
          and we obsolete {B,C}, then the individual changes are
          `A moves from B to C` and `B moves from C to D`, but the composed
          change set is `A moves from B to D`
      
  transaction:
    is_a: change
    description: >-
      A change that is a composition of a set of changes, where those changes are treated as a single unit.
      Could be a single change, or the results of an ontology diff
    slots:
      - change set

  change set summary statistic:
    description:
      A summary statistic for a set of changes of the same type, grouped by zero or more node properties
    slot_usage:
      change type:
        range: change class type
      count:
        range: integer
      property value set:
        description: >-
          Summary statistic is grouped by these constraints
      
  change mixin:
    mixin: true
    description: >-
      root class for all change mixins

  obsoletion:
    aliases:
      - deprecation
      - retiring
    is_a: change mixin
    mixin: true
    description: >-
      Obsoletion of an element deprecates usage of that element, but does not delete that element.
    comments:
      - >-
        In OWL, deprecation is handled by the deprecation axiom. In OBO, we use this, but place additional requirements and expectations on obsolete elements
    see_also:
      - http://wiki.geneontology.org/index.php/Obsoleting_an_Existing_Ontology_Term
      - https://mondo.readthedocs.io/en/latest/editors-guide/merging-and-obsoleting/
    slot_usage:
      about:
        description: >-
          The element that is obsoleted by this change.
      has undo:
        range: obsoletion

  allows automatic replacement of edges:
    is_a: obsoletion
    mixin: true
    description: >-
      Applies to an obsoletion in which annotations or edges pointing at the obsoleted node can be automatically rewired to point to a target
      
  unobsoletion:
    is_a: change mixin
    mixin: true
    description: >-
      Opposite operation of obsoletion. Rarely performed.
    see_also:
      - http://wiki.geneontology.org/index.php/Restoring_an_Obsolete_Ontology_Term
    slot_usage:
      has undo:
        range: obsoletion

  deletion:
    is_a: change mixin
    mixin: true
    description: >-
      Removal of an element.
    comments:
      - In general, for OBO ontologies, node elements should never be deleted, always obsolete. However, edge deletion is more common.

  creation:
    is_a: change mixin
    mixin: true
    description: >-
      Creation of an element.
    slot_usage:
      has undo:
        range: deletion

  subset membership change:
    is_a: change mixin
    mixin: true
    description: >-
      A change in the membership status of a node with respect to a subset (view)
    slots:
      - in subset
    
  add to subset:
    is_a: subset membership change
    mixin: true
    description: >-
      placing an element inside a subset
    slot_usage:
      in subset:
        description: >-
          subset that the element is being placed inside.

  remove from subset:
    is_a: subset membership change
    mixin: true
    description: >-
      removing an element from a subset
    slot_usage:
      in subset:
        description: >-
          subset that the element is being removed from
      has undo:
        range: add to subset

  ## -- EDGE CHANGES --
        
  edge change:
    abstract: true
    aliases:
      - axiom change
      - triple change
    is_a: simple change
    description: >-
      A change in which the element that is the focus of the change is an edge.
    slots:
      - about edge
    slot_usage:
      subject:
        comments:
          - if subject is empty, use the about field of the last node change
    todos:
      - decide on flat serialization, see https://github.com/cmungall/knowledge-graph-change-language/issues/7

  edge creation:
    aliases:
      - relationship creation
    is_a: edge change
    description: >-
      An edge change in which a de-novo edge is created. The edge is potentially annotated in the same action.
    mixins:
      - creation
    slots:
      - subject
      - predicate
      - object
      - annotation set
    slot_usage:
      change description:
        string_serialization: "creating edge {edge}"
    see_also:
      - http://wiki.geneontology.org/index.php/Guidelines_for_creating_relationships_between_terms

  place under:
    is_a: edge creation
    description: >-
      An edge creation where the predicate is owl:subClassOf
      
  edge deletion:
    aliases:
      - relationship deletion
    is_a: edge change
    description: >-
      An edge change in which an edge is removed. All edge annotations/properies are removed in the same action.
    mixins:
      - deletion
    slots:
      - subject
      - predicate
      - object
      - annotation set
    slot_usage:
      change description:
        string_serialization: "deleting edge {edge}"
        
  edge obsoletion:
    aliases:
      - relationship obsoletion
    is_a: edge change
    description: >-
      An edge change in which an edge is obsoleted.
    comments:
      - >-
        Note there is not yet consensus in how this should be done in rdf/owl implementations. Simply marking the edge deprecated with render it visible to most clients.
        Care must be taken because simply adding a deprecation tag to an axiom does not silence it -- it is still asserted.
        It is therefore more common to obsolete an edge by shadowing the axiom as an annotation. See the Mondo docs for example
    see_also:
      - "https://mondo.readthedocs.io/en/latest/editors-guide/g-logical-axioms/#excluded-subclassof"
    mixins:
      - obsoletion
    slots:
      - subject
      - predicate
      - object
      - annotation set
    slot_usage:
      change description:
        string_serialization: "obsoleting edge {edge}"
        
  edge rewiring:
    is_a: edge change
    description: >-
      An edge change where one node is replaced with another, as in the case of obsoletion with replacement
    examples:
      - value: changing G1 annotated-to T1 to G1 annotated-to T2, after obsoletion of T1 and replacement with T2

  mapping creation:
    aliases:
      - xref creation
    is_a: edge creation
    description: >-
      A specific kind of edge creation in which the created edge is a mapping.
    mixins:
      - creation
    slots:
      - subject
      - predicate
      - object
      - annotation set
    slot_usage:
      change description:
        string_serialization: "creating mapping {edge}"
      subject:
        description: This corresponds to subject_id in SSSOM
      predicate:
        description: This corresponds to predicate_id in SSSOM. The value of this is typically a predicate from SKOS
      object:
        description: This corresponds to object_id in SSSOM
    todos:
      - decide whether to make a corresponding change to the datamodel

  node move:
    is_a: edge change
    description: >-
      A node move is a combination of deleting a parent edge and adding a parent edge, where the predicate is preserved and the object/parent node changes
    examples:
      - value: changing a is-a b to a is-a c
    slot_usage:
      change description:
        string_serialization: "move {about edge} from {old value} to {new value}"

  node deepening:
    is_a: node move
    description: >-
      A node move in which a node where the destination is a proper descendant of the original location.
      Note that here descendant applied not just to subclass, but edges of any predicate in the relational graph
    examples:
      - value: changing a is-a b to a is-a c, where c is a subclass of b
    slot_usage:
      change description:
        string_serialization: "deepened {about edge} from {old value} to {new value}"

  node shallowing:
    is_a: node move
    description: >-
      The opposite of node deepening
    examples:
      - value: changing a is-a c to a is-a b, where c is a subclass of b
    slot_usage:
      change description:
        string_serialization: "shallowed {about} from {old value} to {new value}"

  predicate change:
    is_a: edge change
    description: >-
      An edge change where the predicate (relationship type) is modified.
    examples:
      - value: changing a is-a b to a part-of b
    slot_usage:
      change description:
        string_serialization: "changing relationship between {about.subject} and {about.object} from {old value} to {new value}"

  edge logical interpretation change:
    is_a: edge change
    description: >-
      An edge change where the subjet, object, and predicate are unchanged, but the logical interpretation changes
    examples:
      - value: changing a SubClassOf r some b to a subClassOf r only b

  logical axiom change:
    is_a: simple change
    description: >-
      A simple change where a logical axiom is changed, where the logical axiom cannot be represented as an edge
        
  node change:
    abstract: true
    is_a: simple change
    description: >-
      A simple change where the change is about a node
    slots:
      - about node

  node rename:
    is_a: node change
    description: >-
      A node change where the name (aka rdfs:label) of the node changes
    slots:
      - old value
      - new value
      - has textual diff      
    slot_usage:
      old value:
        multivalued: false
      new value:
        multivalued: false
      change description:
        string_serialization: "rename {about} from {old value} to {new value}"
    examples:
      - value: "rename UBERON:0002398 from 'manus' to 'hand'"
        description: "replacing the rdfs:label of 'manus' on an uberon class with the rdfs:label 'hand'"

  node annotation change:
    description: >-
      A node change where the change alters node properties/annotations. TODO
    is_a: node change

  node annotation replacement:
    is_a: node annotation change
    description: >-
      A node annotation change where the change replaces a particular property value. TODO

  node synonym change:
    is_a: node change
    
  new synonym:
    description: >-
      A node synonym change where a de-novo synonym is created
    is_a: node synonym change
    slots:
      - new value

  name becomes synonym:
    is_a: node synonym change
    description: >-
      A node synonym where the name NAME of an node NODE moves to a synonym, and NODE receives a new name. This change consists of compose of (1) a node rename where NAME is replaced by a different name (2) a new synonym
    slot_usage:
      change 1:
        range: node rename
      change 2:
        range: new synonym
        description: >-
      change description:
        string_serialization: "synonym {synonym} becomes new name of {about}, and name {name} becomes a synonym"
          
      
  remove synonym:
    description: >-
      A node synonym change where a synonym is deleted
    is_a: node synonym change
    slots:
      - old value

  synonym replacement:
    description: >-
      A node synonym change where the text of a synonym is changed
    is_a: node synonym change
    slots:
      - old value
      - new value
      - has textual diff

  synonym predicate change:
    aliases:
      - node scope change
    description: >-
      A node synonym change where the predicate of a synonym is changed.
      Background: synonyms can be represented by a variety of predicates. For example, many OBO
      ontologies make use of predicates such as oio:hasExactSynonym, oio:hasRelatedSynonym, etc
    is_a: node synonym change
    slots:
      - old value
      - new value
      - has textual diff

  node text definition change:
    abstract: true
    is_a: node change
    description: >-
      A node change where the text definition is changed
    
  new text definition:
    description: >-
      A node change where a de-novo text definition is created
    is_a: node text definition change
    slots:
      - new value

  remove text definition:
    description: >-
      A node change where a text definition is deleted
    is_a: node text definition change
    slots:
      - old value

  text definition replacement:
    description: >-
      A node change where a text definition is modified
    is_a: node text definition change
    slots:
      - old value
      - new value
      - has textual diff

        
  datatype change:
    is_a: simple change

  add node to subset:
    aliases:
      - add term to slim
    is_a: node change
    mixins:
      - add to subset
    description: >-
      Places a node inside a subset, by annotating that node
    see_also:
      - http://wiki.geneontology.org/index.php/Adding_a_Term_to_a_GO_Subset_(Slim)

  removed node from subset:
    aliases:
      - remove term from slim
    is_a: node change
    mixins:
      - remove from subset
    description: >-
      Removes a node from a subset, by removing an annotation
    slot_usage:
      change description:
        string_serialization: "removing {about} from {subset}"
      about node:
        description: >-
          The node that is removed from the subset
      subset:
        description: >-
          The subset from which the node is to be removed

  node obsoletion:
    aliases:
      - node deprecation
      - class obsoletion
      - term obsoletion
      - concept obsoletion
    is_a: node change
    mixins:
      - obsoletion
    description: >-
      Obsoletion of a node deprecates usage of that node, but does not delete it.
    slots:
      - has direct replacement
      - has nondirect replacement
    slot_usage:
      change description:
        string_serialization: "obsoleting {about}"
      associated change set:
        is_a: change set
        description: >-
          All changes forced as a result of this obsoletion. For example,
          starting with `A subClassOf B subClassOf C`, if we obsolete node B,
          then we may decide to bundle in a node move change of A from B to C.
          Note: this change set is not considered a part of the obsoletion,
          as obsoletion is considered atomic/simple. Instead this is a reference
          to a change set that may exist elsewhere
    see_also:
      - http://wiki.geneontology.org/index.php/Obsoleting_an_Existing_Ontology_Term
        
  node unobsoletion:
    # reverse_of: node obsoletion
    aliases:
      - node undeprecation
      - class unobsoletion
      - term unobsoletion
      - concept unobsoletion
    is_a: node change
    mixins:
      - unobsoletion
    description: >-
      unobsoletion of a node deprecates usage of that node. Rarely applied.
    slot_usage:
      change description:
        string_serialization: "unobsoleting {about}"
      replaced by:
        range: node
      consider:
        range: node
    see_also:
      - http://wiki.geneontology.org/index.php/Restoring_an_Obsolete_Ontology_Term
        
  node creation:
    is_a: node change
    mixins:
      - creation
    description: >-
      a node change in which a new node is created
    slots:
      - node id
      - name
      - owl type
      - annotation set
    slot_usage:
      change description:
        string_serialization: "creating node {id} {label} with {annotation set}"
    todos:
      - allow this for the creation of an instance from a class. This may include metaclasses (templates)
    see_also:
      - http://wiki.geneontology.org/index.php/Guidelines_for_creating_a_GO_term

  class creation:
    is_a: node creation
    description: >-
      A node creation where the owl type is 'class'
    todos:
      - restrict owltype value
    slots:
      - superclass
    slot_usage:
      change description:
        string_serialization: "creating {about}"
      
  node deletion:
    is_a: node change
    mixins:
      - deletion
    description: >-
      Deletion of a node from the graph. Note it is recommended nodes are obsoleted and never merged,
      but this operation exists to represent deletions in ontologies, accidental or otherwise
    slot_usage:
      change description:
        string_serialization: "deleting {about}"

  node direct merge:
    is_a: node obsoletion
    mixins:
      - allows automatic replacement of edges
    description: >-
      An obsoletion change in which all metadata (including name/label) from the source node is deleted and added to the target node, and edges can automatically be rewired to point to the target node
    comments:
      - In the OBO format serialization of the graph, the source node vanishes from the file as a distinct entry and is retained only as an alt_id
    slot_usage:
      has direct replacement:
        required: true
      about node:
        aliases:
          - alt_id
      change description:
        string_serialization: "obsoleting {about} and merging into {has direct replacement}"
    see_also:
      - http://wiki.geneontology.org/index.php/Merging_Ontology_Terms
      - http://wiki.geneontology.org/index.php/Principles_for_merging_terms

  node obsoletion with direct replacement:
    is_a: node obsoletion
    mixins:
      - allows automatic replacement of edges
    description: >-
      An obsoletion change in which information from the obsoleted node is selectively copied to a single target, and edges can automatically be rewired to point to the target node
    slot_usage:
      has direct replacement:
        required: true
      change description:
        string_serialization: "obsoleting {about} and replacing with {has direct replacement}"
    see_also:
      - http://wiki.geneontology.org/index.php/Merging_Ontology_Terms
      - http://wiki.geneontology.org/index.php/Principles_for_merging_terms

  node obsoletion with no direct replacement:
    is_a: node obsoletion
    description: >-
      An obsoletion change in which there is no direct replacement
    slot_usage:
      has nondirect replacement:
        required: true
      change description:
        string_serialization: "obsoleting {about} considering {has nondirect replacement}"

  textual diff:
    description: >-
      A summarizing of a change on a piece of text. This could be rendered in a number of different ways

  configuration:
    description: >-
      The meaning of operations can be configured
    attributes:
      name predicate:
      definition predicate:
      main synonym predicate:
      synonym predicates:
        inlined: true
      creator predicate:
      contributor predicate:
      obsoletion workflow:
      obsoletion policy:

  session:
    description: >-
      A session consists of a set of change sets bundled with the activities that generated those change sets
    slots:
      - change set
      - activity set
      
slots:

  pull request:

  see also:
    slot_uri: rdfs:seeAlso
    
  creator:
    slot_uri: dcterms:creator
  contributor:
    slot_uri: dcterms:creator
  change date:
    slot_uri: dcterms:date
  has undo:
    domain:
      change
    description: >-
      A change that reverses this change
    range:
      change
    multivalued: false

  node id:
    description: >-
      id of a node to be created
    todos:
      - consider using 'about' instead
    range: node
  superclass:
    range: node
    
  about:
    description: >-
      The 'focus' entity on which the change operates
    multivalued: false
    range: ontology element

  about node:
    is_a: about
    multivalued: false
    range: node

  about edge:
    is_a: about
    multivalued: false
    range: edge

  target:
    description: >-
      The secondary entity on which the change operates

  old value:
    description: >-
      The value of a property held in the old instance of the ontology

  new value:
    description: >-
      The value of a property held in the new instance of the ontology

  in subset:
    description: >-
      The subset that pertains to this change
    range: ontology subset

  change description:
    description: >-
      A string serialization of the change. This should be both human-readable, and parseable.
    comments:
      - Form 1: IRIs are denoted by CURIEs, optionally followed by label in parenthesis
      - Form 2: IRIs are denoted by the rdfs:label in single quotes, e.g. 'nervous system'
    examples:
      - value: "rename UBERON:0002398 from 'manus' to 'hand'"
      - value: "move 'hand' from 'part of' 'hindlimb' to 'part of' 'forelimb'"
      - value: "merge 'cellular metabolic process' into 'metabolic process'"
      - value: "search and replace 'metabolic process' with 'metabolism' in all labels under 'biological process'"
      - value: "search and replace 'metabolic process' with 'metabolism' in all labels under 'biological process' retaining as 'exact synonym'"

  has textual diff:
    description: >-
      A representation of character-level changes on a textual literal property.
      For example, if a text definition may change by only a single character such as addition of a period,
      it is useful to be able to see this visually.
    comments:
      - this is NOT for representing the diff of the change as a whole.
    domain: change
    range: textual diff
      
  change set:
    description: >-
      A collection of changes
    range: change
    multivalued: true
    inlined: true
    inlined_as_list: true

  has replacement:
    domain: node obsoletion
    range: node
    abstract: true
    is_a: target
    description: >-
      A single node obsoletion event may be accompanied by one or more suggested replacement nodes
    comments:
      - In OBO, the replacement term is indicated using IAO:nnnnnn
      
  has direct replacement:
    range: node
    multivalued: false
    close_mappings:
      - IAO:0100001 
    description: >-
      An obsoletion replacement where it IS valid to automatically update annotations/edges pointing at the node with its direct replacement
    comments:
      - if a node obsoletion C, C about N1, and C has direct replacement N2, and there exists an edge with an edge property referencing N1, it is possible to replace with N2
      - if a node obsoletion C C about N1, and Chas direct replacement N2, then N1 IAO:0100001 N2
      
  has nondirect replacement:
    range: node
    multivalued: true
    description: >-
      An obsoletion replacement where it is NOT valid to automatically update annotations/edges pointing at the node with its direct replacement
    close_mappings:
      - oio:consider
    comments:
      - if a node obsoletion C, C about N1, and C has direct replacement N2, and there exists an edge with an edge property referencing N1, it is possible to replace with N2
      - if a node obsoletion C C about N1, and Chas direct replacement N2, then N1 oio:consider N2
    
