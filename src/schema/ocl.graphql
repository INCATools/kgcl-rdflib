type Activity
  {
    activityId: String!
    startedAtTime: String
    endedAtTime: String
    wasInformedBy: Activity
    wasAssociatedWith: Agent
    used: String
  }

type AddNodeToSubset implements AddToSubset
  {
    oldValue: String
    newValue: String
    about: String
  }

interface AddToSubset
  {
  }

type Agent
  {
    actedOnBehalfOf: Agent
    wasInformedBy: Activity
  }

type Annotation
  {
    property: Node
    filler: String
    annotationSet: Annotation
  }

type Change
  {
    wasGeneratedBy: Activity
  }

interface ChangeMixin
  {
  }

type ChangeSetSummaryStatistic
  {
  }

type ClassNode
  {
    id: String!
    name: String
    annotationSet: Annotation
  }

type ComplexChange
  {
    changeSet: [Change]
  }

interface Creation
  {
  }

type DatatypeChange
  {
    wasGeneratedBy: Activity
  }

interface Deletion
  {
  }

type Edge
  {
    subject: Node
    edgeLabel: Node
    object: Node
    annotationSet: Annotation
  }

type EdgeChange
  {
    about: String
    oldValue: String
    newValue: String
  }

type EdgeCreation implements Creation
  {
    about: String
    oldValue: String
    newValue: String
    subject: Node
    edgeLabel: Node
    object: Node
    annotationSet: Annotation
  }

type EdgeLabelChange
  {
    about: String
    oldValue: String
    newValue: String
  }

type EdgeLogicalInterpretationChange
  {
    about: String
    oldValue: String
    newValue: String
  }

type InstanceNode
  {
    id: String!
    name: String
    annotationSet: Annotation
  }

type LogicalDefinition
  {
  }

type NewSynonym
  {
    oldValue: String
    about: String
    newValue: String
  }

type NewTextDefinition
  {
    oldValue: String
    about: String
    newValue: String
  }

type Node
  {
    id: String!
    name: String
    annotationSet: Annotation
  }

type NodeAnnotationChange
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeAnnotationReplacement
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeChange
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeCreation implements Creation
  {
    oldValue: String
    newValue: String
    about: String
    id: String!
    name: String
    annotationSet: Annotation
  }

type NodeDeepening
  {
    about: String
    oldValue: String
    newValue: String
  }

type NodeDeletion implements Deletion
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeMove
  {
    about: String
    oldValue: String
    newValue: String
  }

type NodeObsoletion implements Obsoletion
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeObsoletionWithMerge
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeObsoletionWithSplit
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeRename
  {
    about: String
    oldValue: String
    newValue: String
    hasTextualDiff: TextualDiff
  }

type NodeSynonymChange
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeTextDefinitionChange
  {
    oldValue: String
    newValue: String
    about: String
  }

type NodeUnobsoletion implements Unobsoletion
  {
    oldValue: String
    newValue: String
    about: String
  }

interface Obsoletion
  {
  }

type OntologyElement
  {
  }

type PropertyValue
  {
    property: Node
    filler: String
  }

interface RemoveFromSubset
  {
  }

type RemoveSynonym
  {
    newValue: String
    about: String
    oldValue: String
  }

type RemoveTextDefinition
  {
    newValue: String
    about: String
    oldValue: String
  }

type RemovedNodeFromSubset implements RemoveFromSubset
  {
    oldValue: String
    newValue: String
    about: String
  }

type SimpleChange
  {
    about: String
    oldValue: String
    newValue: String
  }

type Subset
  {
  }

type SynonymReplacement
  {
    about: String
    oldValue: String
    newValue: String
    hasTextualDiff: TextualDiff
  }

type TextDefinitionReplacement
  {
    about: String
    oldValue: String
    newValue: String
    hasTextualDiff: TextualDiff
  }

type TextualDiff
  {
  }

type Transaction
  {
    changeSet: [Change]
  }

interface Unobsoletion
  {
  }


